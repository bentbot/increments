/// <reference types="node" />
/// <reference types="es6-promise" />
import * as http from 'http';
/**
 * The stability proxy is an http server responsible for intercepting
 * JSON webdriver commands. It keeps track of whether the page under test
 * needs to wait for page stability, and initiates a wait if so.
 */
export declare class BlockingProxy {
    seleniumAddress: string;
    rootElement: string;
    ng12hybrid: boolean;
    stabilityEnabled: boolean;
    server: http.Server;
    constructor(seleniumAddress: any, rootElement?: any);
    waitForAngularData(): string;
    /**
     * This command is for the proxy server, not to be forwarded to Selenium.
     */
    static isProxyCommand(commandPath: string): boolean;
    /**
     * Create the WebDriver protocol URL for the executeAsync command.
     *
     * @param {string} originalUrl The URL from the incoming command.
     */
    static executeAsyncUrl(originalUrl: string): string;
    /**
     * Return true if the requested method should trigger a stabilize first.
     *
     * @param {string} commandPath Original request url.
     */
    shouldStabilize(commandPath: any): boolean;
    /**
     * Creates a request to forward to the Selenium server. The request stream
     * will not be ended - the user will need to write any data and then call
     * `.end`.
     *
     * @param {string} method
     * @param {string} messageUrl
     * @param {function(http.IncomingMessage)} callback
     *
     * @return {http.ClientRequest}
     */
    createSeleniumRequest(method: any, messageUrl: any, callback: any): http.ClientRequest;
    handleProxyCommand(message: any, data: any, response: any): void;
    sendRequestToStabilize(originalRequest: any): Promise<{}>;
    requestListener(originalRequest: http.IncomingMessage, response: http.ServerResponse): void;
    listen(port: number): number;
    quit(): Promise<{}>;
}
